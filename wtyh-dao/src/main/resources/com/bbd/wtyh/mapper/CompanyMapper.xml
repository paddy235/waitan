<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bbd.wtyh.mapper.CompanyMapper">

    <resultMap id="BaseResultMap" type="com.bbd.wtyh.domain.CompanyDO">
        <id column="company_id" jdbcType="INTEGER" property="companyId"/>
        <result column="credit_code" jdbcType="VARCHAR" property="creditCode"/>
        <result column="name" jdbcType="VARCHAR" property="name"/>
        <result column="longitude" jdbcType="DOUBLE" property="longitude"/>
        <result column="latitude" jdbcType="DOUBLE" property="latitude"/>
        <result column="organization_code" jdbcType="VARCHAR" property="organizationCode"/>
        <result column="legal_person" jdbcType="VARCHAR" property="legalPerson"/>
        <result column="area_id" jdbcType="INTEGER" property="areaId"/>
        <result column="address" jdbcType="VARCHAR" property="address"/>
        <result column="registered_capital" jdbcType="INTEGER" property="registeredCapital"/>
        <result column="registered_capital_type" jdbcType="INTEGER" property="registeredCapitalType"/>
        <result column="registered_date" jdbcType="DATE" property="registeredDate"/>
        <result column="registered_type" jdbcType="VARCHAR" property="registeredType"/>
        <result column="company_type" jdbcType="TINYINT" property="companyType"/>
        <result column="business_type" jdbcType="INTEGER" property="businessType"/>
        <result column="risk_level" jdbcType="TINYINT" property="riskLevel"/>
        <result column="previous_risk_level" jdbcType="TINYINT" property="previousRiskLevel"/>
        <result column="record_number" jdbcType="VARCHAR" property="recordNumber"/>
        <result column="status" jdbcType="TINYINT" property="status"/>
        <result column="is_new" jdbcType="TINYINT" property="neo"/>
        <result column="create_by" jdbcType="VARCHAR" property="createBy"/>
        <result column="create_date" jdbcType="DATE" property="createDate"/>
        <result column="update_by" jdbcType="VARCHAR" property="updateBy"/>
        <result column="update_date" jdbcType="DATE" property="updateDate"/>
        <result column="exposure_date" jdbcType="DATE" property="exposureDate"/>
        <result column="analysisResult" jdbcType="TINYINT" property="analysisResult"/>
    </resultMap>

    <sql id="Base_Column_List">
    company_id,credit_code, name, longitude, latitude, organization_code, legal_person, area_id, address, registered_capital,
     registered_capital_type, registered_date, registered_type, company_type, business_type, risk_level, previous_risk_level,
     record_number, status, is_new, create_by, create_date, update_by, update_date
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from company
        where company_id = #{companyId,jdbcType=INTEGER}
    </select>


    <select id="countByDate" resultType="com.bbd.wtyh.domain.InBusinessDO">
        select count(1) count from company com,
        company_building cb,building bui,park p,park_and_building_relation pabr where
        p.park_id=pabr.park_id and
        pabr.building_id=bui.building_id and
        cb.company_id=com.company_id and
        cb.building_id=bui.building_id and
        p.park_id=#{parkId}
        <if test="#{start}!=null">
            and com.registered_date >= #{start}
        </if>
        <if test="#{end}!=null">
            <![CDATA[ and com.registered_date < #{end} ]]>
        </if>
    </select>


    <select id="countByType" resultType="com.bbd.wtyh.domain.CompanyTypeCountDO">
        select count(1) count
        from company com, company_building cb ,building bui,park p,park_and_building_relation pabr
        where
		p.park_id=pabr.park_id and
		bui.building_id=pabr.building_id and
		cb.company_id=com.company_id and
		cb.building_id=bui.building_id and
		p.park_id=#{parkId} and
		com.company_type=#{type}
    </select>


    <select id="countTypeByBuild" resultType="com.bbd.wtyh.domain.CompanyTypeCountDO">
   		select count(*) count from (
            select  DISTINCT com.company_id from company com , company_building cb  where
                cb.company_id=com.company_id and
                cb.building_id=#{buildingId} and
                com.company_type=#{type}
          ) b
   </select>

    <select id="getRiskLevelNumber" resultType="map">
        select risk_level as riskLevel, company_number as companyNumber from company_risk_number;
    </select>

    <select id="buildingBackground" resultType="com.bbd.wtyh.domain.CompanyTypeCountDO">

   		select count( DISTINCT com.name) count from company com , company_building cb , company_background cbg  where
   			cb.company_id=com.company_id and
   			com.company_id=cbg.company_id and
   			cb.building_id=#{buildingId} and
   			cbg.background=#{background}

   </select>

    <select id="countAllCompany" resultType="int">
        select count(*) count from company
    </select>

    <select id="findByPage" parameterType="java.util.HashMap" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from company limit #{pagination.begin}, #{pagination.pageSize}
    </select>

    <update id="updateRiskLevel">
        update company
        <set>
            risk_level=#{riskLevel},
            <if test="previousRiskLevel != null"> previous_risk_level=#{previousRiskLevel}, </if>
            update_date=now(),
            update_by=#{updateBy}
        </set>
         where company_id=#{companyId}
    </update>
    <select id="getCompanyById" resultType="com.bbd.wtyh.domain.CompanyDO">
        select <include refid="Base_Column_List"/>  from company
        where company_id=#{companyId}
    </select>

    <select id="maxVersion" resultType="int">
        select max(data_version) from  static_risk_data
    </select>


    <select id="buildingCompany" resultMap="BaseResultMap">

        select DISTINCT  a.*, IFNULL(car.analysis_result,4) analysisResult,car.exposure_date exposureDate
        from (


                select c.* , IFNULL(cb.background , 4) background
                from company c
                left join   company_building b
                            on  b.company_id=c.company_id
                left join   (  select * from  company_background cb where cb.background in (3,4,5) ) cb
                            on cb.company_id=c.company_id
                where b.building_id=#{buildingId}
                      and c.company_type is not null

            )
        a
        LEFT JOIN company_analysis_result car
        on car.company_id=a.company_id

        order by

        <choose>
            <when test="orderField == 2">a.registered_capital</when>
            <when test="orderField == 3">a.background</when>
            <when test="orderField == 4">a.registered_date</when>
            <when test="orderField == 5">a.registered_type</when>
            <otherwise>a.background</otherwise>
        </choose>


        <if test="descAsc!='desc'">
            asc
        </if>
        <if test="descAsc=='desc'">
            desc
        </if>
        , a.name desc

    </select>

    <select id="countByQuery" resultType="Integer">
        select count(distinct(c.company_id)) from company c left join company_background b
        on  c.company_id=b.company_id
        <where>
            <if test="areaId != null">
                and c.area_id=#{areaId}
            </if>
            <if test="companyType != null">
                and c.company_type=#{companyType}
            </if>
            <if test="background != null">
                and b.background=#{background}
            </if>
        </where>

    </select>

    <select id="searchCompany" resultMap="BaseResultMap">
		select
		company_id,name
		from company c
		<where>
            <if test="companyType != null">
                c.company_type=#{companyType}
            </if>
            <if test="name != null">
                and c.name like CONCAT('%',#{name},'%' )
            </if>

        </where>
        limit 0,#{size}

	</select>


    <select id="queryCompanyByType" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from company
        <where>
            <if test="companyType != null">
                and company_type=#{companyType}
            </if>
        </where>
        <if test="orderByField != null">
            order by
            <choose>
                <when test="orderByField==1">
                    registered_capital_type is null,registered_capital_type,registered_capital
                </when>
                <when test="orderByField==2">
                    registered_date is null, registered_date
                </when>
            </choose>

            <choose>
                <when test="descAsc=='desc'">
                    desc
                </when>
                <otherwise>asc</otherwise>
            </choose>
        </if>
    </select>

	<select id="searchCompanyName" resultType="java.util.HashMap" resultMap="BaseResultMap">
		select
			c.`name` as name,
			c.legal_person as legalPerson,
			c.address as address,
			c.registered_capital as registeredCapital,
            c.registered_capital_type as registeredCapitalType,
			c.registered_date as registeredDate,
			c.registered_type as registeredType,
			s.static_risk_index as staticRisk
		from company c, static_risk_data s where c.`name`=s.company_name and c.company_type=4 and s.data_version=#{dataVersion}
		<if test="keyword != null and keyword != ''">
			and c.`name` like concat('%',#{keyword},'%')
		</if>
        <if test="areaId != null">
            and c.area_id=#{areaId}
        </if>
		limit #{pagination.begin}, #{pagination.pageSize}
    </select>

    <select id="searchCompanyNameCount" resultType="int" parameterType="java.util.HashMap">
		select count(1) from company c, static_risk_data s where c.`name`=s.company_name and c.company_type=4 and s.data_version=#{dataVersion}
		<if test="keyword != null and keyword != ''">
			and c.`name` like concat('%',#{keyword},'%')
		</if>

        <if test="areaId != null">
            and c.area_id=#{areaId}
        </if>

    </select>

    <select id="selectByName" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/>from company
        where name=#{companyName} limit 0,1
    </select>



	<select id="queryCompanyNames" resultType="string">
        select c.`name`
        from company c , company_building cb , building b ,park p, park_and_building_relation pabr
        where c.company_id=cb.company_id
              and b.building_id=cb.building_id
              and p.park_id=pabr.park_id
              and pabr.building_id=b.building_id
              <if test="parkId!=null">
              	and p.park_id=#{parkId}
              </if>
              <if test="buildingId!=null">
              	and b.building_id=#{buildingId}
              </if>
    </select>

    <select id="companyInfo" parameterType="String" resultType="java.util.Map">
        SELECT
            c.`name` AS NAME,
            IF(c.status=1,'存续',IF(c.status=2,'注销','')) AS status,
            cb.background AS background,
            c.risk_level as riskLevel,
            c.company_type AS companyType
        FROM
            company c
        LEFT JOIN company_background cb ON c.company_id = cb.company_id
        WHERE
            c.`name` = #{companyName}
    </select>



    <select id="countCompany"  resultType="java.util.Map">
            SELECT c.*,a.`name` from (
                    select COUNT(1) num ,c.area_id
                    from company c
                    where c.area_id is not null
                    GROUP BY c.area_id
            ) c
            LEFT JOIN area a
            on a.area_id=c.area_id
            where a.parent_id=104
    </select>


    <select id="getSpectrumAnalysis"  resultType="com.bbd.wtyh.domain.vo.SpectrumVO">
        SELECT
        NAME,
        longitude,
        latitude,
        newCompany,
        previousRiskLevel,
        registeredCapital,
        ifnull(staticRiskIndex,"") as staticRiskIndex,
        ifnull(exposureDate,"") as exposureDate,
        #{companyNumber} AS companyNumber
        FROM
        (
        SELECT
        company.`name`,
        company.longitude,
        company.latitude,
        company.is_new AS newCompany,
        company.previous_risk_level AS previousRiskLevel,
        static_risk_data.static_risk_index AS staticRiskIndex,
        company.registered_capital AS registeredCapital,
        DATE_FORMAT(
        company_analysis_result.exposure_date,
        '%Y-%m'
        ) AS exposureDate
        FROM
        company
        LEFT JOIN company_analysis_result ON company.company_id = company_analysis_result.company_id
        LEFT JOIN static_risk_data ON company. NAME = static_risk_data.company_name
        WHERE
        risk_level = #{risk_level}
        <if test="areaId != null"> and company.area_id = #{areaId}</if>
        AND (
        static_risk_data.data_version = #{dateVersion}
        OR static_risk_data.data_version IS NULL
        OR static_risk_data.data_version = ''
        )
        UNION
        SELECT
        t1.`name`,
        t1.longitude,
        t1.latitude,
        t1.newCompany,
        t1.previousRiskLevel,
        NULL AS staticRiskIndex,
        t1.registered_capital AS registeredCapital,
        DATE_FORMAT(
        company_analysis_result.exposure_date,
        '%Y-%m'
        ) AS exposureDate
        FROM
        (
        SELECT
        `name`,
        company_id,
        registered_capital,
        longitude,
        latitude,
        is_new AS newCompany,
        previous_risk_level AS previousRiskLevel
        FROM
        company
        WHERE
        risk_level = #{risk_level}
        <if test="areaId != null"> and company.area_id = #{areaId}</if>
        AND `name` NOT IN (
        SELECT
        company.`name`
        FROM
        company
        LEFT JOIN static_risk_data ON company. NAME = static_risk_data.company_name
        WHERE
        risk_level = #{risk_level}
        <if test="areaId != null"> and company.area_id = #{areaId}</if>
        AND (
        static_risk_data.data_version = #{dateVersion}
        OR static_risk_data.data_version IS NULL
        OR static_risk_data.data_version = ''
        )
        )
        ) t1
        LEFT JOIN company_analysis_result ON t1.company_id = company_analysis_result.company_id
        ) m
        ORDER BY
        staticRiskIndex DESC
        LIMIT 0,
        #{companyNumber}
    </select>

    <select id="getSpectrumAnalysisByRiskLevel"  resultType="com.bbd.wtyh.domain.vo.SpectrumVO">
        SELECT
        NAME,
        longitude,
        latitude,
        newCompany,
        previousRiskLevel,
        registeredCapital,
        ifnull(staticRiskIndex,"") as staticRiskIndex,
        ifnull(exposureDate,"") as exposureDate,
        #{companyNumber} AS companyNumber
        FROM
        (
            SELECT
            company.`name`,
            company.longitude,
            company.latitude,
            company.is_new AS newCompany,
            company.previous_risk_level AS previousRiskLevel,
            static_risk_data.static_risk_index AS staticRiskIndex,
            company.registered_capital AS registeredCapital,
            DATE_FORMAT(
            company_analysis_result.exposure_date,
            '%Y-%m'
            ) AS exposureDate
            FROM
            company
            LEFT JOIN company_analysis_result ON company.company_id = company_analysis_result.company_id
            LEFT JOIN static_risk_data ON company. NAME = static_risk_data.company_name
            WHERE
            risk_level = #{risk_level} and company_type!=4
            <if test="areaId != null"> and company.area_id = #{areaId}</if>
            AND (
            static_risk_data.data_version = #{dateVersion}
            <if test='risk_level != "4"'>
                OR static_risk_data.data_version IS NULL
                OR static_risk_data.data_version = ''
            </if>
            )
            UNION
            SELECT
            company.`name`,
            company.longitude,
            company.latitude,
            company.is_new AS newCompany,
            company.previous_risk_level AS previousRiskLevel,
            static_risk_data.static_risk_index AS staticRiskIndex,
            company.registered_capital AS registeredCapital,
            DATE_FORMAT(
            company_analysis_result.exposure_date,
            '%Y-%m'
            ) AS exposureDate
            FROM
            company
            LEFT JOIN company_analysis_result ON company.company_id = company_analysis_result.company_id
            LEFT JOIN static_risk_data ON company. NAME = static_risk_data.company_name
            WHERE
            risk_level = #{risk_level} and company_type=4
            AND EXISTS (SELECT 1 FROM offline_financial_white ofw  where ofw.companyId=company.company_id)
            <if test="areaId != null"> and company.area_id = #{areaId}</if>
            AND (
            static_risk_data.data_version = #{dateVersion}
            <if test='risk_level != "4"'>
            OR static_risk_data.data_version IS NULL
            OR static_risk_data.data_version = ''
            </if>
            )
        ) rs ORDER BY rs.staticRiskIndex desc,rs.`name`
        LIMIT 1000
    </select>

    <select id="queryCompanyByName"  resultType="com.bbd.wtyh.domain.CompanyDO">
        SELECT
            company.`name`,
            company.company_type AS companyType
        FROM
          company
        WHERE
          company.`name` = #{company}
    </select>

    <select id="getCompanyList" resultMap="BaseResultMap">
        SELECT
          <include refid="Base_Column_List"/>
        FROM
          company c
        WHERE
          c.company_id > #{startId}
          <if test='type != "0"'>
              AND c.company_type IN (${type})
          </if>
        LIMIT #{limit}
    </select>

    <select id="countAllCompanyByType" resultType="int">
        SELECT
          count(*) counts
        FROM
        company c
        WHERE
        1=1
        <if test='type != "0"'>
            AND c.company_type IN (${type})
        </if>
    </select>


    <select id="findCompanyByName" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from company
        <where>
            <if test="names !=null and 0 !=names.size">
            AND `name` IN <foreach item ="nam" index="index" collection="names"
                                        open="(" separator="," close=")" > #{nam} </foreach>
            </if>
        </where>
        LIMIT 1000
    </select>

    <select id="findKindredFinanceCompanyNameByCompanyName" parameterType="java.util.List" resultType="java.lang.String">
        select
        `name`
        from company
        <where>
            <if test="names !=null and 0 !=names.size">
                AND `name` IN <foreach item ="nam" index="index" collection="names"
                                       open="(" separator="," close=")" > #{nam} </foreach>
            </if>
            AND `company_type` > 0 AND `company_type` &lt;> 7 AND `company_type` &lt;> 8
        </where>
        LIMIT 20000
    </select>

    <select id="getLineCompanyListMoreThanExecuteDate" resultMap="BaseResultMap">
        select <include refid="Base_Column_List"/> from company
          where company_type = 4
            <if test='executeDate !=null'>
                AND (create_date > #{executeDate} or update_date > #{executeDate})
            </if>
        and company_id not in (select company_id from offline_financial_record)
    </select>

</mapper>
